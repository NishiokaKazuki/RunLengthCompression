/* ------------------------------------------------------------------------- */
/*                                                                           */
/* ファイル操作                                                              */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/*  番号    更新内容                                更新日      名前         */
/* ------------------------------------------------------------------------- */
/* 000000   新規作成                                2020/01/24  西岡  和輝   */
/* 000001   更新                                    2020/01/26  西岡  和輝   */
/* ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* includeファイル                                                           */
/* ------------------------------------------------------------------------- */

#include "FileUtils.h"

FileUtils::FileUtils() {
    /* クラス変数初期化 */
    ulfileSize = 0;
    scerrCode    = SYSTEMCODE_SUCCSES;
    scerrMessage = NULL;
    fp           = NULL;
}

FileUtils::~FileUtils() {
    /* メモリ解放 */
    Close();
    FreeMemory();
    freeErrMsg();
}

/* ------------------------------------------------------------------------- */
/* 関数名   : OpenReadMode                                                   */
/* 機能名   : ファイル読み込み                                               */
/* 機能概要 : ファイルを読み取りモードで読み込み、                           */
/*            その先頭アドレスをクラス変数fpに格納する                       */  
/* 引数     : SCHR* : scFilePath : ファイルへのパス                          */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::OpenReadMode ( SCHR* scFilePath ) {
    /* 引数チェック                                                          */
    if ( fp != NULL  ) { Close(); }     /* 既にファイルを開いている場合      */
    if ( !CheckErr() ) { return;  }

    open( scFilePath,  ( SCHR* )"rb" );

    setFileSize();
}

/* ------------------------------------------------------------------------- */
/* 関数名   : OpenReadMode                                                   */
/* 機能名   : ファイル読み込み                                               */
/* 機能概要 : ファイルを書き込みモードで読み込みもしくは新規作成し、         */
/*            その先頭アドレスをクラス変数fpに格納する                       */
/* 引数     : SCHR* : scFileName : ファイルへのパス                          */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::OpenWriteMode ( SCHR* scFilePath ) {
    /* 引数チェック                                                          */
    if ( fp != NULL  ) { Close(); }     /* 既にファイルを開いている場合      */
    if ( !CheckErr() ) { return;  }

    open( scFilePath,  ( SCHR* )"wb+" );
}

/* ------------------------------------------------------------------------- */
/* 関数名	: Close                                                          */
/* 機能名	: ファイルクローズ                                               */
/* 機能概要	: クラス変数fpが開いているファイルを閉じる                       */
/* 戻り値	: ULNG* : 成功       : ファイルサイズ                            */
/*          :       : 失敗       : NULL                                      */
/* 作成日	: 2020/01/24		西岡　和輝		新規作成					 */
/* ------------------------------------------------------------------------- */
void  FileUtils::Close (){
    /* 引数チェック                                                          */
    if ( fp == NULL  ) { return; }      /* 現在ファイルを開いていない場合    */

    fclose( fp );
}

/* ------------------------------------------------------------------------- */
/* 関数名	: Out                                                            */
/* 機能名	: ファイル出力                                                   */
/* 機能概要	: クラス変数fpが開いているファイルに引数scStrを出力              */
/*            パスが指定されている場合は新たにファイルを開く                 */
/* 引数		: SCHR* : scFileName : ファイルへのパス                          */
/* 引数		: SCHR* : scStr      : 出力文字列                                */
/* 作成日	: 2020/01/24		西岡　和輝		新規作成					 */
/* ------------------------------------------------------------------------- */
void  FileUtils::Out ( SCHR* scFilePath, SCHR* scStr, ULNG ulFileSize ) {
    /* 引数チェック                                                          */
    if ( !CheckErr() ) { return; }

    /* パスが指定されている場合 */
    if ( scFilePath != NULL ) {
        OpenWriteMode ( scFilePath );
    }
    fwrite( ( const char* )scStr, sizeof( SCHR ), ulFileSize , fp );
}

/* ------------------------------------------------------------------------- */
/* 関数名	: GetSize                                                        */
/* 機能名	: ファイルサイズ測定                                             */
/* 機能概要	: クラス変数fpからファイルサイズを取得しreturnする               */
/* 戻り値	: ULNG* : 成功       : ファイルサイズ                            */
/*          :       : 失敗       : NULL                                      */
/* 作成日	: 2020/01/24		西岡　和輝		新規作成					 */
/* ------------------------------------------------------------------------- */
ULNG  FileUtils::GetFileSize() {
    /* 引数チェック                                                          */
    if ( fp == NULL  ) { setErr(); }
    if ( !CheckErr() ) { return 0; }
    
    return ulfileSize;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : GetMemory                                                      */
/* 機能名   : ファイル内容取得                                               */
/* 機能概要 : メモリに書き込まれたファイルのバイナリを取得                   */
/* 戻り値   : SCHR* : 成功       : ファイル内容                              */
/*          :       : 失敗       : NULL                                      */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
SCHR* FileUtils::GetMemory() {
    /* エラーチェック                                                        */
    if ( scfileOnMem == NULL ) { return NULL; }
    if ( !CheckErr() )         { return NULL; }
    
    return scfileOnMem;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : SetMemory                                                      */
/* 機能名   : ファイルからメモリ書き込み                                     */
/* 機能概要 : クラス変数fpから内容を取得し、メモリにコピーする               */
/* 戻り値   : SCHR* : 成功       : ファイル内容                              */
/*          :       : 失敗       : NULL                                      */
/* 作成日   : 2020/01/24        西岡  和輝      新規作成                     */
/*          : 2020/01/26        西岡  和輝      更新                         */
/* ------------------------------------------------------------------------- */
SCHR* FileUtils::SetMemory() {
    /* エラーチェック                                                        */
    if ( fp == NULL  ) { setErr(); }
    if ( !CheckErr() ) { return NULL; }

    FreeMemory();

    scfileOnMem = ( SCHR* )malloc( sizeof( SCHR ) * ulfileSize ); /* メモリ確保  */
    fread ( scfileOnMem, sizeof( SCHR ), ulfileSize, fp );   /* メモリへ書き込み */
    
    return scfileOnMem;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : FreeMemory                                                     */
/* 機能名   : ファイルから書き込まれたメモリの解放                           */
/* 機能概要 : クラス変数scfileOnMemをメモリ解放する                          */
/* 戻り値   : SCHR* : 成功       : ファイル内容                              */
/*          :       : 失敗       : NULL                                      */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::FreeMemory() {
    /* エラーチェック                                                        */
    if ( scfileOnMem == NULL ) { return; }

    free( scfileOnMem );
    scfileOnMem == NULL;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : CheckErr                                                       */
/* 機能名   : エラーが発生しているかのチェック                               */
/* 機能概要 : エラーが発生している場合false、していない場合はtrueをreturn    */
/* 戻り値	: SCHR  : 発生       : false                                     */
/*          :       : 未発生     : true                                      */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
SCHR  FileUtils::CheckErr() {

    // wip:エラーコードのバリュエーション
    switch ( scerrCode ) {
    
    case SYSTEMCODE_SUCCSES:
        return true;
    
    case SYSTEMCODE_FILED:
    default:
        return false;
    }
}

/* ------------------------------------------------------------------------- */
/* 関数名   : GetErrMsg                                                      */
/* 機能名   : エラーメッセージの取得                                         */
/* 機能概要 : クラス変数scerrMessageの取得(エラー未発生の場合NULL)           */
/* 戻り値	: SCHR  :            : scerrMessage                              */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
SCHR* FileUtils::GetErrMsg() {
    return scerrMessage;
}

/* ------------------------------------------------------------------------- */
/* 関数名	: Open      													 */
/* 機能名	: ファイル読み込み												 */
/* 機能概要	: ファイルを読み込み、その先頭アドレスをクラス変数fpに格納する   */
/* 引数		: SCHR* : scFileName : ファイルへのパス                          */
/* 作成日	: 2020/01/24		西岡　和輝		新規作成					 */
/* ------------------------------------------------------------------------- */
void  FileUtils::open ( SCHR* scFilePath, SCHR* scOpenMode ) {
    /* 変数宣言                                                              */
    errno_t	 err   = NULL;		        /* エラー                            */

    /* パスからファイルを開き、成否の確認                                    */
    err = fopen_s( &fp , ( char * )scFilePath , ( char* )scOpenMode );
	if ( err != NULL ) {
        setErrMsg( ( SCHR* )"cannot open file" );
        setErr();
	}

    return;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : setSize                                                        */
/* 機能名   : ファイルサイズの格納                                           */
/* 機能概要 : クラス変数fpからファイルサイズを取得し、                       */
/*          : クラス変数ulfileSizeに格納                                     */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::setFileSize() {
    if ( fp == NULL  ) { setErr(); }
    if ( !CheckErr() ) { return;   }

    fseek( fp , 0 , SEEK_END );
	ulfileSize = ftell( fp );
	fseek( fp , 0 , SEEK_SET );
}

/* ------------------------------------------------------------------------- */
/* 関数名   : setErr                                                         */
/* 機能名   : エラー発生時の処理                                             */
/* 機能概要 : クラス変数scerrCodeにエラーコードを格納                        */ 
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::setErr() {
    // wip:エラーコードのバリュエーションの増幅にあわせて引数の取得?
    scerrCode = SYSTEMCODE_FILED;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : setErrMsg                                                      */
/* 機能名   : エラー発生時の処理                                             */
/* 機能概要 : クラス変数scerrMessageにエラー内容を格納                       */
/* 引数		: SCHR* : scErrMessage : エラー内容                              */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::setErrMsg( SCHR* scErrMessage ) {
    /* エラーチェック                                                        */
    if ( scErrMessage == NULL ) { return; }
    setErr();
    freeErrMsg();
    scerrMessage = scErrMessage;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : freeErrMsg                                                     */
/* 機能名   : エラーメッセージの削除                                         */
/* 機能概要 : クラス変数scerrMessageのメモリ解放                             */
/* 作成日   : 2020/01/26        西岡  和輝      新規作成                     */
/* ------------------------------------------------------------------------- */
void  FileUtils::freeErrMsg() {
    /* エラーチェック                                                        */
    if ( scerrMessage == NULL ) { return; }
    free( scerrMessage );
}

/* ------------------------------------------------------------------------- */
/*              Copyright HAL Collage of Technology & Design                 */
/* ------------------------------------------------------------------------- */